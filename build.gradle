apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'osgi'

ext {
	expectedGradleVersion = '3.2.1'
}

group = 'com.mopano'
version = '1.0'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	if (project.hasProperty('JAVA7_HOME')) {
        options.bootClasspath = "$JAVA7_HOME/jre/lib/rt.jar"
    }
}

repositories {
    mavenCentral()
}

configurations {
    glassfish
    johnzon
    jackson
}

sourceSets {
    jackson {
        resources {
            srcDir 'src/jackson/resources'
        }
    }
}


dependencies {
	compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.1.0.Final'
	compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
	testCompile group: 'junit', name: 'junit', version: '4.10'
	testRuntime group: 'org.postgresql', name: 'postgresql', version: '9.4.1212.jre7'
	testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'
	testCompile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.5'
    glassfish group: 'org.glassfish', name: 'javax.json', version: '1.0.4'
    johnzon group: 'org.apache.johnzon', name: 'johnzon-core', version: '0.9.5'
    jackson group: 'com.github.pgelinas', name: 'jackson-javax-json', version: '0.9.0'
}

jar {
	manifest = null
}

task compile
compile.dependsOn compileJava, processResources, compileTestJava, processTestResources

task testProviderGlassfish(type:Test, dependsOn: compile) {
	systemProperty 'org.jboss.logging.provider', 'slf4j'
	systemProperty 'expect.provider', 'org.glassfish.json.JsonProviderImpl'
	systemProperty 'json.provider.short', 'glassfish'
	classpath = classpath + configurations.glassfish
}

task testProviderJohnzon(type:Test, dependsOn: compile) {
	systemProperty 'org.jboss.logging.provider', 'slf4j'
	systemProperty 'expect.provider', 'org.apache.johnzon.core.JsonProviderImpl'
	systemProperty 'json.provider.short', 'johnzon'
	classpath = classpath + configurations.johnzon
}

task testProviderJackson(type:Test, dependsOn: compile) {
	systemProperty 'org.jboss.logging.provider', 'slf4j'
	systemProperty 'expect.provider', 'com.github.pgelinas.jackson.javax.json.spi.JacksonProvider'
	systemProperty 'json.provider.short', 'jackson'
	classpath = configurations.jackson + classpath + sourceSets.jackson.getRuntimeClasspath()
}

test.dependsOn testProviderGlassfish, testProviderJohnzon, testProviderJackson
test.actions = []

task sourcesJar(type: Jar, dependsOn: compileJava) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact source: sourcesJar, classifier: 'src', extension: 'zip'

            // Maven publish plugin adds ALL dependencies with 'runtime' scope
            // see https://github.com/gradle/gradle/blob/b004f39ece183176bf77c1eebc4aa5cbc20ca5cc/subprojects/maven/src/main/java/org/gradle/api/publish/maven/tasks/GenerateMavenPom.java#L104
            pom.withXml {
                asNode().children().each { projnode ->
                    if (projnode.name().getLocalPart().equals('dependencies')) {
                        projnode.children().each { depnode ->
                            if (depnode.name().getLocalPart().equals('dependency')) {
                                Node scopechild = null;
                                depnode.children().each { depchild ->
                                    if (depchild.name().getLocalPart().equals('scope')) {
                                        depchild.setValue('compile')
                                        scopechild = depchild
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file( "$project.buildDir/generated-pom.xml" )
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = expectedGradleVersion
}
